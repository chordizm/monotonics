import Head from "next/head";
import { App } from "@monotonics/adapter_react";
import { Identity, Data } from "@monotonics/core";
import { trpc } from "../utils/trpc";
import { useEffect } from "react";

const datasets: {
  id: Identity;
  name: string;
  description: string;
  mimeType: string;
}[] = Array.from({ length: 10 }).map((_, i) => ({
  id: `dataset-${i}`,
  name: `Dataset ${i + 1}`,
  description: `Dataset ${i + 1} description`,
  mimeType: "image/jpeg",
}));

const data: Omit<Data, "raw" | "params">[] = Array.from({ length: 100 }).map(
  (_, i) => ({
    id: `data-${i}`,
    date: new Date(Date.now()),
    datasetId: `dataset-${i % 10}`,
    name: `Data ${i + 1}`,
    mimeType: "image/jpeg",
  })
);

export default function Home() {
  const tasks = trpc.task.list.useInfiniteQuery({});
  useEffect(() => {
    console.log("Tasks:", tasks.data);
  }, [tasks.data]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <App
        selectedId={datasets[0].id}
        datasets={datasets}
        data={data}
        resolveUrl={() => "/_1ee8a886-9546-4f1c-ab96-72ca1f2e7f38.jpeg"}
        resolveData={() =>
          Promise.resolve({
            id: `data-0`,
            date: new Date(Date.now()),
            datasetId: `dataset-1`,
            name: `Data 1`,
            mimeType: "image/jpeg",
            params: {
              segments: Array.from({
                length: Math.floor(Math.random() * 500) + 1,
              }).map((_, i) => ({
                points: [
                  { x: Math.random() * 1024, y: Math.random() * 1024 },
                  { x: Math.random() * 1024, y: Math.random() * 1024 },
                  { x: Math.random() * 1024, y: Math.random() * 1024 },
                ],
                params: {
                  area: Math.floor(Math.random() * 1000),
                  perimeter: Math.floor(Math.random() * 1000),
                  radius: Math.floor(Math.random() * 1000),
                },
              })),
            },
          })
        }
      />
    </>
  );
}
